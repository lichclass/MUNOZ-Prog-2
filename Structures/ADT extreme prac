#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 50

typedef struct {
    char LName[16];
    char FName[24];
    char MI;
} NAMETYPE;

typedef struct {
    NAMETYPE name;
    int ID;
    char Course[8];
    int year; 
} STUDTYPE;

typedef struct {
    STUDTYPE list[MAX];
    int cnt;
} STUDLIST;

STUDLIST list = { 0 };

//void populateList(STUDLIST*, int);
STUDLIST populateList2();
void displayList(STUDLIST);
void insertAtPos(STUDLIST*, int, STUDTYPE);
STUDTYPE deleteElem(STUDLIST*, int);

int main()
{
    
    STUDLIST newList = populateList2();
    STUDTYPE newStud = {{"James", "Lebron", 'M'}, 55555555, "BSCS", 1};
    insertAtPos(&newList, 4, newStud);
    deleteElem(&newList, 11111111);
    displayList(newList);
    
    return 0;
}

void displayList(STUDLIST myList){
    int i;
    char tempStr[50];
    for(i = 0; i < myList.cnt; i++){
        sprintf(tempStr, "%s,", myList.list[i].name.LName);
        printf("%-10s", tempStr);
        printf("%-8s %c", myList.list[i].name.FName, myList.list[i].name.MI);
        printf("%10d", myList.list[i].ID);
        printf("%8s", myList.list[i].Course);
        printf("%2d\n", myList.list[i].year);
    }
}

STUDLIST populateList2(){
    STUDTYPE studArr[] = { 
                            {{"Collins","James",'K'}, 11111111, "BSCS", 1},
                            {{"Abrams","John",'L'}, 22222222, "BSCS", 1},
                            {{"De Shaun","Jamal",'M'}, 33333333, "BSCS", 1},
                         };
                         
    int numElem = sizeof(studArr) / sizeof(STUDTYPE);
    
    STUDLIST pop;
    
    memcpy(pop.list, studArr, numElem * sizeof(STUDTYPE));
    pop.cnt = numElem;
    
    return pop;
}

void insertAtPos(STUDLIST *myList, int pos, STUDTYPE newStud){
    if(myList->cnt < MAX){
        
        if(pos <= myList->cnt){
            memcpy(myList->list + (pos + 1), myList->list + pos, (myList->cnt - pos) * sizeof(STUDTYPE));
            myList->list[pos] = newStud;
            myList->cnt++;
        } else {
            printf("\nInvalid position!\n");
        }
        
    } else {
        printf("\nNo space!\n");
    }
}

STUDTYPE deleteElem(STUDLIST *myList, int ID){
        int i;
        STUDTYPE dummy = {{"XXXX", "XXXX", 'X'}, 0, "XXXX", 0};
        for(i = 0; i < myList->cnt && ID != myList->list[i].ID; i++){}
        if(i < myList->cnt){
            dummy = myList->list[i];
            memcpy(myList->list + i, myList->list + (i + 1), (myList->cnt - (i + 1)) * sizeof(STUDTYPE));
            myList->cnt--;
        } else {
            printf("\nID not found!\n");
        }
        
        return dummy;
}

int deleteAllCourse(STUDLIST *myList, char course[]){
    int i = myList->cnt - 1, deleted = 0;
    while(i >= 0){
        if(.
        )
    }
    
}
